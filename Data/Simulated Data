Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(dplyr)
## 
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
## 
##     filter, lag
## The following objects are masked from 'package:base':
## 
##     intersect, setdiff, setequal, union
 library(tidyr)

 # For plotting
 library(ggplot2)

 # For power calculations
 library(pwr)
# set seed for reproduction
set.seed(123)

# number of observations 
n <- 180

# simulate data set 1: Frustration intolerance
mean_frustration <- 77.47
sd_frustration <- 19.68
frustration <- pmin(pmax(rnorm(n, mean_frustration, sd_frustration), 28), 140)

# simulate data set 2: Social Media Behaviour 
mean_social_media <- 4.8
sd_social_media <- 2.2
social_media <- pmin(pmax(rnorm(n, mean_social_media, sd_social_media), 1), 10)

# correlation between the two data sets 
correlation_strength <- 0.3

# standardize the variables 
standardized_frustration <- scale(frustration)
standardized_social_media <- scale(social_media)

# put in the desired correlation
new_correlation <- correlation_strength
transformed_social_media <- new_correlation * standardized_frustration + sqrt(1 - new_correlation^2) * standardized_social_media

# produce dataset with transformed variables 
simulated_data_alternative <- data.frame(Frustration = standardized_frustration, Social_Media = transformed_social_media)

# show first few rows of data set 
head(simulated_data_alternative)
##   Frustration Social_Media
## 1 -0.59714143  -1.27244397
## 2 -0.24832434   1.11030059
## 3  1.64085949   0.09778132
## 4  0.06922019  -0.87883847
## 5  0.13129514  -0.24407627
## 6  1.80598266   0.29661996
# calculate the actual correlation between the transformed variables 
actual_correlation_alternative <- cor(simulated_data_alternative$Frustration, simulated_data_alternative$Social_Media)

# show the actual correlation
print(actual_correlation_alternative)
## [1] 0.3420922
# calculate correlation and p-value 
cor_test_result <- cor.test(simulated_data_alternative$Frustration, simulated_data_alternative$Social_Media)

# show results 
print(cor_test_result)
## 
##  Pearson's product-moment correlation
## 
## data:  simulated_data_alternative$Frustration and simulated_data_alternative$Social_Media
## t = 4.8571, df = 178, p-value = 2.598e-06
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.2061434 0.4650848
## sample estimates:
##       cor 
## 0.3420922
# Scatterplot of transformed variables 
plot(simulated_data_alternative$Frustration, simulated_data_alternative$Social_Media, 
     main = "Scatterplot for transformed variables ",
     xlab = "Frustration (standardized)", ylab = "Social Media (transformed)")

# insert a legend 
legend("topright", legend = sprintf("Korrelation: %.2f", actual_correlation_alternative), cex = 0.8, fill = "white", border = "white")

# number of simulations
num_simulations <- 100

# vector for saved correlations and producing seeds
correlation_results <- numeric(num_simulations) seed_values <- numeric(num_simulations)

# implement simulation through different seeds
for (i in 1:num_simulations) {
seed <- i * 123 # use a definite random number for each simulation V

# set randomizer for reproducing
set.seed(seed)

# simulate data set 1: Frustration Intolerance
frustration <- pmin(pmax(rnorm(n, mean_frustration, sd_frustration), 28), 140) 

# simulate data set 2: Social Media Behaviour
social_media <- pmin(pmax(rnorm(n, mean_social_media, sd_social_media), 1), 10) 

# standardize variabales
12
standardized_frustration <- scale(frustration) 
standardized_social_media <- scale(social_media)


# insert desired correlation
new_correlation <- correlation_strength
transformed_social_media <- new_correlation * standardized_frustration + sqrt(1 -
new_correlation^2) * standardized_social_media

# produce data set with transformed variables
simulated_data_alternative <- data.frame(Frustration = standardized_frustration, Social_Media = transformed_social_media)

# calculate correlation between transformed variables
correlation_results[i] <- cor(simulated_data_alternative$Frustration, simulated_data_alternative$Social_Media)

# save seed value
seed_values[i] <- seed }

# Produce a scatterplot for correlations through different seeds
plot(seed_values, correlation_results,
main = "Correlations through different seeds", 
xlab = "Seed-Value", ylab = "Correlation",
pch = 19, col = "blue")

# define colours based on correlation values
colors <- ifelse(correlation_results < 0.25, "red",
ifelse(correlation_results >= 0.25 & correlation_results <= 0.35, "green",
"orange"))

# insert points with colours
points(seed_values, correlation_results, pch = 19, col = colors)
